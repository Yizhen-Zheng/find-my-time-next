export type Task = {
  title?: string;
  //the id in db
  taskId?: number;
  //Suggested categories for the AI to choose from.
  taskType?: string;
  duration?: number; // Priority level.
  // Priority level.
  importance?: string;
  // The date the AI determines the task should be done by.
  dueDate?: string; // Format in supabase timestamptz: MM-DD-HH
  // currently not needed(test phase)
  userId?: string;
  // detect created date, will be used to 'expired' a task
  createdAt?: string; // come from supabase insert time generated
};
export type TaskFromSupabase = {
  /*
create table public.task (
  id bigint generated by default as identity not null,
  user_id uuid null default auth.uid (),
  created_at timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  due_date timestamp with time zone null,
  duration smallint null,
  importance text null default 'Medium'::text,
  title text null,
  task_type text null,
  constraint task_pkey primary key (id),
  constraint task_id_key unique (id),
  constraint task_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;
  */
  id?: number; //int8 used as
  user_id?: string;
  created_at?: string;
  due_date?: string;
  duration?: number; //int 2 cuz 32767 mins is 546 hours
  importance?: string;
  title?: string;
  task_type?: string;
};

import { World } from "matter-js";

export type MatterContextType = {
  world: World;
  scene: HTMLDivElement;
};
export type SingleTaskCardActiveContextType = {
  showSingleTaskCard: boolean;
  setShowSingleTaskCard: (setActive: boolean) => void;
};
export type ActiveTaskContextType = {
  activeTask: Task | null;
  setActiveTask: (val: null | Task) => void;
};
export type TaskOnDeleteContextType = {
  taskOnDelete: Task | null;
  setTaskOnDelete: (taskOnDelete: Task | null) => void;
};
